{
  "notes": [
    {
      "name": "Some coding time",
      "id": "x-coredata://5BB76045-06F4-4E59-9A37-2CA6AB682D10/ICNote/p22315",
      "created": "2024-12-26T01:31:29.000Z",
      "modified": "2024-12-26T01:53:45.000Z",
      "body": "<html><head><link rel=\"stylesheet\" href=\"style.css\"></head><body><div><h1>Some coding time</h1></div>\n<div><br></div>\n<div>How about some code here</div>\n<div><br></div>\n<div>This is some code turning great stuff into awesome.</div>\n<div><br></div>\n<div><br></div>\n<div><tt>#!/usr/bin/env node</tt></div>\n<div><tt><br></tt></div>\n<div><tt>import { promises as fs } from \"fs\"</tt></div>\n<div><tt>import { createHash } from \"crypto\"</tt></div>\n<div><tt>import { join } from \"path\"</tt></div>\n<div><tt>import * as cheerio from \"cheerio\"</tt></div>\n<div><tt><br></tt></div>\n<div><tt>const extractImageInfo = (src) =&gt; {</tt></div>\n<div><tt>  const cleanSrc = src.replace(/\\\\\"/g, '\"');</tt></div>\n<div><tt>  const [header, base64Data] = cleanSrc.split(\",\");</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  if (!base64Data) return null;</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  const mimeMatch = header.match(/data:image\\/([a-zA-Z0-9.-]+(?:;|$))/);</tt></div>\n<div><tt>  if (!mimeMatch) return null;</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  const mimeType = mimeMatch[1].replace(\"\", \"\");</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  return {</tt></div>\n<div><tt>    mimeType,</tt></div>\n<div><tt>    base64Data,</tt></div>\n<div><tt>  };</tt></div>\n<div><tt>};</tt></div>\n<div><tt><br></tt></div>\n<div><tt>const copyStylesheet = async (htmlDir) =&gt; {</tt></div>\n<div><tt>  try {</tt></div>\n<div><tt>    // Read style.css from the same directory as the script</tt></div>\n<div><tt>    const css = await fs.readFile(\"style.css\", \"utf8\");</tt></div>\n<div><tt>    // Copy to html directory</tt></div>\n<div><tt>    await fs.writeFile(join(htmlDir, \"style.css\"), css);</tt></div>\n<div><tt>    console.log(\"Copied style.css to html directory\");</tt></div>\n<div><tt>  } catch (error) {</tt></div>\n<div><tt>    console.error(\"Error copying style.css:\", error);</tt></div>\n<div><tt>    throw error;</tt></div>\n<div><tt>  }</tt></div>\n<div><tt>};</tt></div>\n<div><tt><br></tt></div>\n<div><tt>const processHtml = async (html, imageDir) =&gt; {</tt></div>\n<div><tt>  try {</tt></div>\n<div><tt>    await fs.mkdir(imageDir);</tt></div>\n<div><tt>  } catch (err) {</tt></div>\n<div><tt>    if (err.code !== \"EEXIST\") throw err;</tt></div>\n<div><tt>  }</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  const processedImages = new Map();</tt></div>\n<div><tt>  const $ = cheerio.load(html);</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  // Add CSS link</tt></div>\n<div><tt>  $(\"head\").length ? $(\"head\") : $(\"html\").prepend(\"&lt;head&gt;\");</tt></div>\n<div><tt>  $(\"head\").prepend('&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;');</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  // Wrap content in body if it doesn't exist</tt></div>\n<div><tt>  if (!$(\"body\").length) {</tt></div>\n<div><tt>    $(\"*\").wrapAll(\"&lt;body&gt;\");</tt></div>\n<div><tt>  }</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  const promises = $('img[src^=\"data:image\"]')</tt></div>\n<div><tt>    .map(async (_, img) =&gt; {</tt></div>\n<div><tt>      const src = $(img).attr(\"src\");</tt></div>\n<div><tt>      if (!src) return;</tt></div>\n<div><tt><br></tt></div>\n<div><tt>      const imageInfo = extractImageInfo(src);</tt></div>\n<div><tt>      if (!imageInfo) return;</tt></div>\n<div><tt><br></tt></div>\n<div><tt>      const { mimeType, base64Data } = imageInfo;</tt></div>\n<div><tt><br></tt></div>\n<div><tt>      const hash = createHash(\"md5\").update(base64Data).digest(\"hex\");</tt></div>\n<div><tt><br></tt></div>\n<div><tt>      if (processedImages.has(hash)) {</tt></div>\n<div><tt>        $(img).attr(\"src\", `images/${processedImages.get(hash)}`);</tt></div>\n<div><tt>        return;</tt></div>\n<div><tt>      }</tt></div>\n<div><tt><br></tt></div>\n<div><tt>      const ext = mimeType.replace(\"x-adobe-\", \"\");</tt></div>\n<div><tt>      const filename = `image_${hash}.${ext}`;</tt></div>\n<div><tt>      processedImages.set(hash, filename);</tt></div>\n<div><tt><br></tt></div>\n<div><tt>      try {</tt></div>\n<div><tt>        const buffer = Buffer.from(base64Data, \"base64\");</tt></div>\n<div><tt>        await fs.writeFile(join(imageDir, filename), buffer);</tt></div>\n<div><tt>        $(img).attr(\"src\", `images/${filename}`);</tt></div>\n<div><tt>        console.log(`Saved image: ${filename}`);</tt></div>\n<div><tt>      } catch (err) {</tt></div>\n<div><tt>        console.error(`Failed to save ${filename}:`, err);</tt></div>\n<div><tt>      }</tt></div>\n<div><tt>    })</tt></div>\n<div><tt>    .get();</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  await Promise.all(promises);</tt></div>\n<div><tt>  return $.html();</tt></div>\n<div><tt>};</tt></div>\n<div><tt><br></tt></div>\n<div><tt>const main = async () =&gt; {</tt></div>\n<div><tt>  try {</tt></div>\n<div><tt>    const jsonPath = process.argv[2];</tt></div>\n<div><tt>    if (!jsonPath) {</tt></div>\n<div><tt>      console.error(\"Please provide path to JSON file\");</tt></div>\n<div><tt>      process.exit(1);</tt></div>\n<div><tt>    }</tt></div>\n<div><tt><br></tt></div>\n<div><tt>    const jsonContent = await fs.readFile(jsonPath, \"utf8\");</tt></div>\n<div><tt>    const data = JSON.parse(jsonContent);</tt></div>\n<div><tt><br></tt></div>\n<div><tt>    // Create HTML directory</tt></div>\n<div><tt>    const htmlDir = \"html\"</tt></div>\n<div><tt>    try {</tt></div>\n<div><tt>      await fs.mkdir(htmlDir);</tt></div>\n<div><tt>    } catch (err) {</tt></div>\n<div><tt>      if (err.code !== \"EEXIST\") throw err;</tt></div>\n<div><tt>    }</tt></div>\n<div><tt><br></tt></div>\n<div><tt>    // Create images directory inside HTML directory</tt></div>\n<div><tt>    const imageDir = join(htmlDir, \"images\");</tt></div>\n<div><tt><br></tt></div>\n<div><tt>    // Copy stylesheet to html directory</tt></div>\n<div><tt>    await copyStylesheet(htmlDir);</tt></div>\n<div><tt><br></tt></div>\n<div><tt>    const processedNotes = await Promise.all(</tt></div>\n<div><tt>      data.notes.map(async (note) =&gt; ({</tt></div>\n<div><tt>        ...note,</tt></div>\n<div><tt>        body: await processHtml(note.body, imageDir),</tt></div>\n<div><tt>      })),</tt></div>\n<div><tt>    );</tt></div>\n<div><tt><br></tt></div>\n<div><tt>    const output = {</tt></div>\n<div><tt>      ...data,</tt></div>\n<div><tt>      notes: processedNotes,</tt></div>\n<div><tt>    };</tt></div>\n<div><tt><br></tt></div>\n<div><tt>    const outputPath = jsonPath.replace(\".json\", \"_processed.json\");</tt></div>\n<div><tt>    await fs.writeFile(outputPath, JSON.stringify(output, null, 2));</tt></div>\n<div><tt>    console.log(`Processed JSON saved to ${outputPath}`);</tt></div>\n<div><tt><br></tt></div>\n<div><tt>    await Promise.all(</tt></div>\n<div><tt>      processedNotes.map(async (note) =&gt; {</tt></div>\n<div><tt>        const htmlPath = join(</tt></div>\n<div><tt>          htmlDir,</tt></div>\n<div><tt>          `${note.name.replace(/[^a-z0-9]/gi, \"_\")}.html`,</tt></div>\n<div><tt>        );</tt></div>\n<div><tt>        await fs.writeFile(htmlPath, note.body);</tt></div>\n<div><tt>        console.log(`HTML saved to ${htmlPath}`);</tt></div>\n<div><tt>      }),</tt></div>\n<div><tt>    );</tt></div>\n<div><tt>  } catch (error) {</tt></div>\n<div><tt>    console.error(\"Error:\", error);</tt></div>\n<div><tt>    process.exit(1);</tt></div>\n<div><tt>  }</tt></div>\n<div><tt>};</tt></div>\n<div><tt><br></tt></div>\n<div><tt>main();</tt></div>\n<div><tt><br></tt></div>\n<div><br></div>\n<div><br></div>\n<div>And here we have some normal stuff </div>\n<div><br></div>\n<div><img style=\"max-width: 100%; max-height: 100%;\" src=\"images/image_e14d3c0fbdb41f5c7c2dec81ef6f940b.jpeg\"><br></div>\n<div><br></div>\n<div>Here is another section for some code</div>\n<div><br></div>\n<div><tt>#!/usr/bin/env osascript -l JavaScript</tt></div>\n<div><tt><br></tt></div>\n<div><tt>function run() {</tt></div>\n<div><tt>  const Notes = Application('Notes');</tt></div>\n<div><tt>  const blogFolder = Notes.folders.whose({ name: \"Blog\" })[0];</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  // Get all notes from the folder</tt></div>\n<div><tt>  const notes = blogFolder.notes();</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  // Map notes to a clean data structure</tt></div>\n<div><tt>  const notesData = notes.map(note =&gt; ({</tt></div>\n<div><tt>    name: note.name(),</tt></div>\n<div><tt>    id: note.id(),</tt></div>\n<div><tt>    created: note.creationDate().toISOString(), // Convert date to ISO string format</tt></div>\n<div><tt>    modified: note.modificationDate().toISOString(),</tt></div>\n<div><tt>    body: note.body()</tt></div>\n<div><tt>  }));</tt></div>\n<div><tt><br></tt></div>\n<div><tt>  // Output JSON directly</tt></div>\n<div><tt>  return JSON.stringify({ notes: notesData }, null, 2);</tt></div>\n<div><tt>}</tt></div>\n<div><tt><br></tt></div>\n</body></html>"
    },
    {
      "name": "Second blog from iPhone",
      "id": "x-coredata://5BB76045-06F4-4E59-9A37-2CA6AB682D10/ICNote/p22226",
      "created": "2024-12-26T00:34:46.000Z",
      "modified": "2024-12-26T00:35:40.000Z",
      "body": "<html><head><link rel=\"stylesheet\" href=\"style.css\"></head><body><div><h1>Second blog from iPhone</h1></div>\n<div><br></div>\n<div>See if this works</div>\n<div><br></div>\n<div><img style=\"max-width: 100%; max-height: 100%;\" src=\"images/image_4ac447458eaea35f192deff33d7e8d15.dng\"><br></div>\n<div><br></div>\n<div><object><table cellspacing=\"0\" cellpadding=\"0\" style=\"border-collapse: collapse; direction: ltr\">\n<tbody>\n<tr><td valign=\"top\" style=\"border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #ccc; padding: 3.0px 5.0px 3.0px 5.0px; min-width: 70px\"><div>Col1</div>\n</td><td valign=\"top\" style=\"border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #ccc; padding: 3.0px 5.0px 3.0px 5.0px; min-width: 70px\"><div>Col2</div>\n</td></tr>\n<tr><td valign=\"top\" style=\"border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #ccc; padding: 3.0px 5.0px 3.0px 5.0px; min-width: 70px\"><div>Name</div>\n</td><td valign=\"top\" style=\"border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #ccc; padding: 3.0px 5.0px 3.0px 5.0px; min-width: 70px\"><div>People</div>\n</td></tr>\n</tbody>\n</table></object><br></div>\n<div><br></div>\n<div>Hey there </div>\n<div><br></div>\n<div><img style=\"max-width: 100%; max-height: 100%;\" src=\"images/image_3c4534485b39c8373b4ad3796d96880c.png\"><br></div>\n</body></html>"
    },
    {
      "name": "First blog",
      "id": "x-coredata://5BB76045-06F4-4E59-9A37-2CA6AB682D10/ICNote/p22231",
      "created": "2024-12-25T20:16:16.000Z",
      "modified": "2024-12-25T20:16:51.000Z",
      "body": "<html><head><link rel=\"stylesheet\" href=\"style.css\"></head><body><div><h1>First blog</h1></div>\n<div><br></div>\n<div>This is my first blog.</div>\n<div><br></div>\n<div>Hopefully this works great ?</div>\n<div><br></div>\n<div>I am not sure actually?</div>\n<div><br></div>\n<div>How about this?</div>\n<div><br></div>\n<div><img style=\"max-width: 100%; max-height: 100%;\" src=\"images/image_d6c0acced5818399125ddbadd0ef788c.jpeg\"><br></div>\n<div><br></div>\n<div>Will this be a beautiful blog?</div>\n<div><br></div>\n</body></html>"
    }
  ]
}